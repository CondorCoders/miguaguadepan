---
import Image from "astro/components/Image.astro";
import KonvaCanvas from "./KonvaCanvas.astro";
import ClearButton from "./ClearButton.astro";
import TabButton, { TargetType } from "./TabButton.astro";
import logo from "../assets/logo.png";
import hats from "../data/hats.json";
import outfits from "../data/outfits.json";
import faces from "../data/faces.json";

const tabData = [
  {
    id: "hats",
    target: TargetType.HATS,
    icon: "/guagua/icons/hats.svg",
    alt: "Sombreros",
  },
  {
    id: "faces",
    target: TargetType.FACES,
    icon: "/guagua/icons/faces.svg",
    alt: "Rostros",
  },
  {
    id: "outfits",
    target: TargetType.OUTFITS,
    icon: "/guagua/icons/outfits.svg",
    alt: "Atuendos",
  },
];
---

<div id="container">
  <main>
    <nav>
      <Image
        id="logo"
        src={logo}
        alt="Astro Logo"
        loading={"lazy"}
        decoding={"async"}
      />
    </nav>
    <div class="content">
      <section id="guagua" class="guagua">
        <KonvaCanvas />
        <button id="download">Descargar imagen</button>
      </section>
      <section id="editor">
        <h1>Crea tu guagua</h1>

        <div
          id="tabs"
          class="section-tabs"
          role="tablist"
          aria-label="Editor de secciones"
        >
          {
            tabData.map(({ id, target, icon, alt }, index) => (
              <TabButton
                id={id}
                target={target}
                isActive={index === 0}
                icon={icon}
                alt={alt}
              />
            ))
          }
        </div>

        <div id="hats" class="gallery">
          {
            hats.map((hat) => (
              <button
                type="button"
                class="gallery-item"
                data-type="hat"
                data-src={hat.image}
              >
                <img src={hat.image} alt={hat.id} />
              </button>
            ))
          }
        </div>

        <div id="faces" class="gallery is-hidden">
          {
            faces.map((face) => (
              <button
                type="button"
                class="gallery-item"
                data-type="face"
                data-src={face.image}
              >
                <img src={face.image} alt={face.id} />
              </button>
            ))
          }
        </div>

        <div id="outfits" class="gallery is-hidden">
          {
            outfits.map((outfit) => (
              <button
                type="button"
                class="gallery-item"
                data-type="outfit"
                data-src={outfit.image}
              >
                <img src={outfit.image} alt={outfit.id} />
              </button>
            ))
          }
        </div>
        <ClearButton />
      </section>
    </div>
  </main>
</div>

<script>
  const editor = document.getElementById("editor");
  const tabsContainer = document.getElementById("tabs");
  const tabButtons = tabsContainer?.querySelectorAll("button[role='tab']");
  const tabContainers = editor?.querySelectorAll(".gallery");
  const clearButton = document.getElementById("clear");
  const downloadButton = document.getElementById("download");

  tabsContainer?.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;
    const tab = target?.closest("button[role='tab']") as HTMLButtonElement;

    if (tab) {
      const selectedTab = tab.getAttribute("data-target");
      const tabContainer = editor?.querySelector(`#${selectedTab}`);
      if (tabContainer) {
        tabContainer.classList.remove("is-hidden");

        tabContainers?.forEach((tabContent) => {
          const isActiveTab = tabContent.id === selectedTab;
          tabContent.classList.toggle("is-hidden", !isActiveTab);
        });
      }

      tabButtons?.forEach((tab) => {
        const isActiveTab = tab.getAttribute("data-target") === selectedTab;
        tab.setAttribute("aria-selected", isActiveTab ? "true" : "false");
        tab.classList.toggle("active", isActiveTab);
      });
    }
  });

  editor?.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;
    const closestButton = target?.closest("button.gallery-item");
    const button = closestButton as HTMLButtonElement;

    if (button) {
      const type = button.getAttribute("data-type");
      const src = button.getAttribute("data-src");

      if (src && type) {
        const event = new CustomEvent(
          `add${type.charAt(0).toUpperCase() + type.slice(1)}`,
          {
            detail: { src, type },
          }
        );
        window.dispatchEvent(event);
      }
    }
  });

  clearButton?.addEventListener("click", (event) => {
    const customEvent = new CustomEvent("deleteSelected");
    window.dispatchEvent(customEvent);
  });

  downloadButton?.addEventListener("click", (event) => {
    const customEvent = new CustomEvent("downloadImage");
    window.dispatchEvent(customEvent);
  });
</script>

<style>
  :global(html, body) {
    margin: 0;
    height: 100%;
    overflow-x: hidden;
  }

  #container {
    font-family: Inter, Roboto, "Helvetica Neue", "Arial Nova", "Nimbus Sans",
      Arial, sans-serif;
    width: 100%;
    background-image: url("../assets/background.jpg");
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    background-attachment: fixed;
  }

  main {
    min-height: 100dvh;
    display: flex;
    flex-direction: column;
  }

  .content {
    max-width: 80rem;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    flex: 1 1 auto;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    padding: 0;
    min-height: 0;
    box-sizing: border-box;

    @media (width >= 48rem) {
      flex-direction: row;
      flex-wrap: wrap;
      gap: 5rem;
    }
  }

  nav {
    padding: 0 1rem;
  }

  @media (width >= 48rem) {
    nav {
      padding: 0 3rem;
    }
  }

  h1 {
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0 0 1.5rem 0;
    text-align: center;
    color: #dad0c4;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    letter-spacing: -0.025em;
  }

  @media (width >= 48rem) {
    h1 {
      font-size: 1.75rem;
      margin: 0 0 2rem 0;
    }
  }

  #logo {
    width: 150px;
    height: auto;
  }

  @media (width >= 48rem) {
    #logo {
      width: 13rem;
    }
  }

  pre {
    font-family: ui-monospace, "Cascadia Code", "Source Code Pro", Menlo,
      Consolas, "DejaVu Sans Mono", monospace;
    font-weight: normal;
    background: linear-gradient(14deg, #d83333 0%, #f041ff 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin: 0;
  }

  h2 {
    font-weight: normal;
    color: #111827;
    font-size: 20px;
  }

  p {
    color: #4b5563;
    font-size: 16px;
    line-height: 24px;
    letter-spacing: -0.006em;
    margin: 0;
  }

  #editor {
    width: 90%;
    background-color: rgba(233, 213, 174, 0.6);
    backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.15);
    border-radius: 1rem;
    padding: 1rem;
    min-height: 350px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);

    @media (width >= 48rem) {
      width: 40%;
      min-height: 450px;
    }
  }

  .section-tabs {
    display: flex;
    gap: 0.75rem;
    justify-content: center;
    margin-bottom: 0.75rem;
  }

  .gallery {
    width: 100%;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.5rem;
    max-height: 300px;
    overflow-y: auto;
    overflow-x: hidden;
    padding-right: 0.25rem;
  }

  @media (width >= 24rem) {
    .gallery {
      grid-template-columns: repeat(4, 1fr);
    }
  }

  @media (width >= 48rem) {
    .gallery {
      grid-template-columns: repeat(5, 1fr);
      gap: 0.75rem;
      max-height: 350px;
    }
  }

  /* Scroll personalizado para la galer√≠a */
  .gallery::-webkit-scrollbar {
    width: 4px;
  }

  .gallery::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 2px;
  }

  .gallery::-webkit-scrollbar-thumb {
    background: rgba(0, 0, 0, 0.3);
    border-radius: 2px;
  }

  .gallery::-webkit-scrollbar-thumb:hover {
    background: rgba(0, 0, 0, 0.5);
  }
  .gallery-item {
    padding: 0.25rem;
    background: rgba(255, 255, 255, 0.6);
    backdrop-filter: blur(8px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    cursor: pointer;
    aspect-ratio: 1 / 1;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 1rem;
    transition: all 0.3s ease;
  }
  .gallery-item:hover {
    background: rgba(254, 252, 232, 0.7);
    border-color: rgba(250, 204, 21, 0.4);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
  }
  .gallery-item:focus-visible {
    outline: 3px solid #facc15;
    outline-offset: 2px;
  }
  .gallery-item img {
    width: 80%;
    height: 80%;
    object-fit: contain;
    display: block;
  }

  .is-hidden {
    display: none;
  }

  .hats,
  .faces,
  .outfits {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .guagua {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 0;
    min-width: 0;
    flex: 0 0 auto;
    width: auto;
    height: auto;
    box-sizing: border-box;
  }
</style>
