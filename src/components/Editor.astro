---
import Image from "astro/components/Image.astro";
import KonvaCanvas from "./KonvaCanvas.astro";
import TabButton, { TargetType } from "./TabButton.astro";
import logo from "../assets/logo.png";
import hats from "../data/hats.json";
import outfits from "../data/outfits.json";
import faces from "../data/faces.json";

const tabData = [
  {
    id: "hats",
    target: TargetType.HATS,
    icon: "/guagua/icons/hats.svg",
    alt: "Sombreros",
  },
  {
    id: "faces",
    target: TargetType.FACES,
    icon: "/guagua/icons/faces.svg",
    alt: "Rostros",
  },
  {
    id: "outfits",
    target: TargetType.OUTFITS,
    icon: "/guagua/icons/outfits.svg",
    alt: "Atuendos",
  },
];
---

<div id="container">
  <main>
    <nav>
      <Image id="logo" src={logo} alt="Astro Logo" decoding={"async"} />
    </nav>
    <div class="content">
      <section id="guagua" class="guagua">
        <KonvaCanvas />
      </section>
      <section id="editor">
        <div class="editor-header">
          <h1>Crea tu guagua</h1>
        </div>

        <div
          id="tabs"
          class="section-tabs"
          role="tablist"
          aria-label="Editor de secciones"
        >
          {
            tabData.map(({ id, target, icon, alt }, index) => (
              <TabButton
                id={id}
                target={target}
                isActive={index === 0}
                icon={icon}
                alt={alt}
              />
            ))
          }
        </div>

        <div id="hats" class="gallery-container" data-category="hats">
          <div class="gallery-wrapper">
            <div class="gallery">
              {
                hats.map((hat) => (
                  <button
                    type="button"
                    class="gallery-item"
                    data-type="hat"
                    data-src={hat.image}
                  >
                    <img src={hat.image} alt={hat.id} />
                  </button>
                ))
              }
            </div>
          </div>
          <div class="pagination-controls">
            <button type="button" class="btn-prev" aria-label="Anterior">
              <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                <path
                  d="M12.5 15L7.5 10L12.5 5"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </button>
            <span class="page-info">
              <span class="current-page">1</span>
              <span class="separator">/</span>
              <span class="total-pages">1</span>
            </span>
            <button type="button" class="btn-next" aria-label="Siguiente">
              <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                <path
                  d="M7.5 15L12.5 10L7.5 5"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </button>
          </div>
        </div>

        <div
          id="faces"
          class="gallery-container is-hidden"
          data-category="faces"
        >
          <div class="gallery-wrapper">
            <div class="gallery">
              {
                faces.map((face) => (
                  <button
                    type="button"
                    class="gallery-item"
                    data-type="face"
                    data-src={face.image}
                  >
                    <img src={face.image} alt={face.id} />
                  </button>
                ))
              }
            </div>
          </div>
          <div class="pagination-controls">
            <button type="button" class="btn-prev" aria-label="Anterior">
              <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                <path
                  d="M12.5 15L7.5 10L12.5 5"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </button>
            <span class="page-info">
              <span class="current-page">1</span>
              <span class="separator">/</span>
              <span class="total-pages">1</span>
            </span>
            <button type="button" class="btn-next" aria-label="Siguiente">
              <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                <path
                  d="M7.5 15L12.5 10L7.5 5"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </button>
          </div>
        </div>

        <div
          id="outfits"
          class="gallery-container is-hidden"
          data-category="outfits"
        >
          <div class="gallery-wrapper">
            <div class="gallery">
              {
                outfits.map((outfit) => (
                  <button
                    type="button"
                    class="gallery-item"
                    data-type="outfit"
                    data-src={outfit.image}
                  >
                    <img src={outfit.image} alt={outfit.id} />
                  </button>
                ))
              }
            </div>
          </div>
          <div class="pagination-controls">
            <button type="button" class="btn-prev" aria-label="Anterior">
              <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                <path
                  d="M12.5 15L7.5 10L12.5 5"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </button>
            <span class="page-info">
              <span class="current-page">1</span>
              <span class="separator">/</span>
              <span class="total-pages">1</span>
            </span>
            <button type="button" class="btn-next" aria-label="Siguiente">
              <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                <path
                  d="M7.5 15L12.5 10L7.5 5"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </button>
          </div>
        </div>
      </section>
    </div>
  </main>
</div>

<script>
  const editor = document.getElementById("editor");
  const tabsContainer = document.getElementById("tabs");
  const tabButtons = tabsContainer?.querySelectorAll("button[role='tab']");
  const galleryContainers = editor?.querySelectorAll(".gallery-container");

  const ITEMS_PER_PAGE_MOBILE = 8;
  const ITEMS_PER_PAGE_DESKTOP = 10;

  function getItemsPerPage() {
    return window.innerWidth >= 768
      ? ITEMS_PER_PAGE_DESKTOP
      : ITEMS_PER_PAGE_MOBILE;
  }

  const paginationState: Record<string, number> = {
    hats: 0,
    faces: 0,
    outfits: 0,
  };

  function updateGalleryPagination(container: Element) {
    const category = container.getAttribute("data-category") || "";
    const gallery = container.querySelector(".gallery");
    const items = gallery?.querySelectorAll(".gallery-item") || [];
    const currentPage = paginationState[category] || 0;
    const itemsPerPage = getItemsPerPage();
    const totalPages = Math.ceil(items.length / itemsPerPage);

    items.forEach((item, index) => {
      const startIndex = currentPage * itemsPerPage;
      const endIndex = startIndex + itemsPerPage;
      const shouldShow = index >= startIndex && index < endIndex;
      (item as HTMLElement).style.display = shouldShow ? "flex" : "none";
    });

    const btnPrev = container.querySelector(".btn-prev") as HTMLButtonElement;
    const btnNext = container.querySelector(".btn-next") as HTMLButtonElement;
    const currentPageSpan = container.querySelector(".current-page");
    const totalPagesSpan = container.querySelector(".total-pages");

    if (btnPrev) btnPrev.disabled = currentPage === 0;
    if (btnNext) btnNext.disabled = currentPage >= totalPages - 1;
    if (currentPageSpan) currentPageSpan.textContent = `${currentPage + 1}`;
    if (totalPagesSpan) totalPagesSpan.textContent = `${totalPages}`;
  }

  galleryContainers?.forEach((container) => {
    updateGalleryPagination(container);

    const category = container.getAttribute("data-category") || "";
    const btnPrev = container.querySelector(".btn-prev");
    const btnNext = container.querySelector(".btn-next");

    btnPrev?.addEventListener("click", () => {
      if (paginationState[category] > 0) {
        paginationState[category]--;
        updateGalleryPagination(container);
      }
    });

    btnNext?.addEventListener("click", () => {
      const gallery = container.querySelector(".gallery");
      const items = gallery?.querySelectorAll(".gallery-item") || [];
      const itemsPerPage = getItemsPerPage();
      const totalPages = Math.ceil(items.length / itemsPerPage);

      if (paginationState[category] < totalPages - 1) {
        paginationState[category]++;
        updateGalleryPagination(container);
      }
    });
  });

  window.addEventListener("resize", () => {
    galleryContainers?.forEach((container) => {
      const category = container.getAttribute("data-category") || "";
      paginationState[category] = 0;
      updateGalleryPagination(container);
    });
  });

  tabsContainer?.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;
    const tab = target?.closest("button[role='tab']") as HTMLButtonElement;

    if (tab) {
      const selectedTab = tab.getAttribute("data-target");
      const tabContainer = editor?.querySelector(`#${selectedTab}`);
      if (tabContainer) {
        tabContainer.classList.remove("is-hidden");

        galleryContainers?.forEach((container) => {
          const isActiveTab = container.id === selectedTab;
          container.classList.toggle("is-hidden", !isActiveTab);
        });
      }

      tabButtons?.forEach((tab) => {
        const isActiveTab = tab.getAttribute("data-target") === selectedTab;
        tab.setAttribute("aria-selected", isActiveTab ? "true" : "false");
        tab.classList.toggle("active", isActiveTab);
      });
    }
  });

  editor?.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;
    const closestButton = target?.closest("button.gallery-item");
    const button = closestButton as HTMLButtonElement;

    if (button) {
      const type = button.getAttribute("data-type");
      const src = button.getAttribute("data-src");

      if (src && type) {
        const event = new CustomEvent(
          `add${type.charAt(0).toUpperCase() + type.slice(1)}`,
          {
            detail: { src, type },
          },
        );
        window.dispatchEvent(event);
      }
    }
  });
</script>

<style>
  :global(html, body) {
    margin: 0;
    height: 100%;
    overflow-x: hidden;
  }

  #container {
    font-family: "Boogaloo", sans-serif;
    font-weight: 400;
    font-style: normal;
    width: 100%;
    min-height: 100dvh;
    position: relative;
    overflow-x: hidden;
  }

  #container::before {
    content: "";
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url("../assets/background.jpg");
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    z-index: -1;

    @media (width < 48rem) {
      position: absolute;
      background-attachment: scroll;
    }
  }

  main {
    min-height: 100dvh;
    display: flex;
    flex-direction: column;
  }

  .content {
    max-width: 80rem;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    flex: 1 1 auto;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    padding: 0;
    min-height: 0;
    box-sizing: border-box;

    @media (width >= 48rem) {
      flex-direction: row;
      flex-wrap: wrap;
      gap: 5rem;
    }
  }

  nav {
    padding: 0 1rem;
  }

  @media (width >= 48rem) {
    nav {
      padding: 0 3rem;
    }
  }

  .editor-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  h1 {
    font-size: 2rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    color: #ebd2a6;
    letter-spacing: -0.02em;
    text-shadow:
      -1px -1px 0 #663613,
      1px -1px 0 #663613,
      -1px 1px 0 #663613,
      1px 1px 0 #663613;
  }

  @media (width >= 48rem) {
    h1 {
      font-size: 2.25rem;
    }
  }

  #logo {
    width: 150px;
    height: auto;
  }

  @media (width >= 48rem) {
    #logo {
      width: 13rem;
    }
  }

  #editor {
    width: 90%;
    background: linear-gradient(
      135deg,
      rgba(254, 205, 110, 0.85) 0%,
      rgba(241, 164, 63, 0.75) 100%
    );
    backdrop-filter: blur(20px);
    border-radius: 1rem;
    padding: 2rem 1rem;
    min-height: 350px;
    margin-bottom: 1rem;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.671);

    @media (width >= 48rem) {
      width: 40%;
      min-height: 450px;
      padding: 2.5rem 2rem;
      margin-bottom: 0;
    }
  }

  .section-tabs {
    display: flex;
    gap: 0.75rem;
    justify-content: center;
    margin-bottom: 1.5rem;
    padding: 0.5rem;
    background: rgba(255, 255, 255, 0.4);
    border-radius: 1rem;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.671);
  }

  .gallery-container {
    display: flex;
    flex-direction: column;
    min-height: 240px;
  }

  @media (width >= 48rem) {
    .gallery-container {
      min-height: 300px;
    }
  }

  .gallery-wrapper {
    flex: 1;
    display: flex;
    flex-direction: column;
    min-height: 230px;
    max-height: 230px;
    justify-content: space-around;
    background: rgba(255, 255, 255, 0.3);
    border-radius: 1rem;
    padding: 1rem;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.671);
  }

  .gallery {
    width: 100%;
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 0.75rem;
  }

  @media (width >= 48rem) {
    .gallery {
      grid-template-columns: repeat(5, 1fr);
      gap: 0.875rem;
    }
  }

  .gallery-item {
    padding: 0.5rem;
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.4);
    cursor: pointer;
    aspect-ratio: 1 / 1;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 0.75rem;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
  }

  .gallery-item::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(241, 164, 63, 0.1);
    opacity: 0;
    transition: opacity 0.2s ease;
    border-radius: inherit;
  }

  .gallery-item:hover::before {
    opacity: 1;
  }

  .gallery-item:hover {
    background: rgba(254, 205, 110, 0.8);
    border-color: rgba(241, 164, 63, 0.5);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(210, 107, 0, 0.15);
  }

  .gallery-item:active {
    transform: translateY(0);
  }

  .gallery-item:focus-visible {
    outline: 2px solid #f1a43f;
    outline-offset: 2px;
  }

  .gallery-item img {
    width: 75%;
    height: 75%;
    object-fit: contain;
    display: block;
    position: relative;
    z-index: 1;
    transition: transform 0.2s ease;
  }

  .gallery-item:hover img {
    transform: scale(1.05);
  }

  .pagination-controls {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1.25rem;
    padding: 1rem 0 0.25rem 0;
    margin-top: 0.5rem;
  }

  .btn-prev,
  .btn-next {
    background: rgba(255, 255, 255, 0.8);
    border: 1px solid rgba(241, 164, 63, 0.3);
    border-radius: 0.5rem;
    padding: 0.65rem;
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 44px;
    min-height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #78716c;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
  }

  .btn-prev:hover:not(:disabled),
  .btn-next:hover:not(:disabled) {
    background: rgba(254, 205, 110, 0.9);
    border-color: rgba(241, 164, 63, 0.5);
    transform: translateY(-1px);
    box-shadow: 0 4px 10px rgba(210, 107, 0, 0.15);
    color: #d26b00;
  }

  .btn-prev:active:not(:disabled),
  .btn-next:active:not(:disabled) {
    transform: translateY(0);
  }

  .btn-prev:disabled,
  .btn-next:disabled {
    opacity: 0.3;
    cursor: not-allowed;
    transform: none;
  }

  .btn-prev svg,
  .btn-next svg {
    display: block;
    width: 20px;
    height: 20px;
  }

  .page-info {
    font-size: 0.95rem;
    color: #57534e;
    font-weight: 600;
    min-width: 70px;
    text-align: center;
    background: rgba(255, 255, 255, 0.5);
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    letter-spacing: 0.02em;
  }

  .separator {
    margin: 0 0.35rem;
    color: #a8a29e;
  }

  .current-page {
    color: #d26b00;
    font-weight: 700;
  }

  .is-hidden {
    display: none;
  }

  .guagua {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 0;
    min-width: 0;
    flex: 0 0 auto;
    width: auto;
    height: auto;
    box-sizing: border-box;
  }
</style>