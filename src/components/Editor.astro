---
import KonvaCanvas from "./KonvaCanvas.astro";
import TabButton, { TargetType } from "./TabButton.astro";
import hats from "../data/hats.json";
import outfits from "../data/outfits.json";
import faces from "../data/faces.json";

const tabData = [
  {
    id: "faces",
    type: "face",
    target: TargetType.FACES,
    alt: "Rostros",
    content: faces,
  },
  {
    id: "hats",
    type: "hat",
    target: TargetType.HATS,
    alt: "Sombreros",
    content: hats,
  },
  {
    id: "outfits",
    type: "outfit",
    target: TargetType.OUTFITS,
    alt: "Atuendos",
    content: outfits,
  },
];
---

<div class="content">
  <section id="guagua" class="guagua">
    <KonvaCanvas />
    <button id="download" aria-label="Descargar imagen">
      <img
        src="/guagua/icons/descargar.svg"
        alt="Descargar"
        width="20"
        height="20"
      />
      Descargar
    </button>
  </section>
  <section id="editor">
    <div
      id="tabs"
      class="section-tabs"
      role="tablist"
      aria-label="Editor de secciones"
    >
      {
        tabData.map(({ id, target, alt }, index) => (
          <TabButton
            id={id}
            target={target}
            isActive={index === 0}
            icon={id}
            alt={alt}
          />
        ))
      }
    </div>
    {
      tabData.map(({ id, type, content }, index) => (
        <div id={id} class={`gallery ${index !== 0 ? "is-hidden" : ""}`}>
          {content.map((item) => (
            <button
              type="button"
              class="gallery-item"
              data-type={type}
              data-src={item.image}
            >
              <img src={item.image} alt={item.id} />
            </button>
          ))}
        </div>
      ))
    }
  </section>
</div>

<script>
  const editor = document.getElementById("editor");
  const tabsContainer = document.getElementById("tabs");
  const tabButtons = tabsContainer?.querySelectorAll("button[role='tab']");
  const tabContainers = editor?.querySelectorAll(".gallery");
  const downloadButton = document.getElementById("download");

  tabsContainer?.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;
    const tab = target?.closest("button[role='tab']") as HTMLButtonElement;

    if (tab) {
      const selectedTab = tab.getAttribute("data-target");
      const tabContainer = editor?.querySelector(`#${selectedTab}`);
      if (tabContainer) {
        tabContainer.classList.remove("is-hidden");

        tabContainers?.forEach((tabContent) => {
          const isActiveTab = tabContent.id === selectedTab;
          tabContent.classList.toggle("is-hidden", !isActiveTab);
        });
      }

      tabButtons?.forEach((tab) => {
        const isActiveTab = tab.getAttribute("data-target") === selectedTab;
        tab.setAttribute("aria-selected", isActiveTab ? "true" : "false");
        tab.classList.toggle("active", isActiveTab);
      });
    }
  });

  editor?.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;
    const closestButton = target?.closest("button.gallery-item");
    const button = closestButton as HTMLButtonElement;

    if (button) {
      // Marcar elemento seleccionado visualmente dentro de su galería
      const parentGallery = button.closest(".gallery");
      parentGallery
        ?.querySelectorAll(".gallery-item.selected")
        .forEach((el) => el.classList.remove("selected"));
      button.classList.add("selected");

      const type = button.getAttribute("data-type");
      const src = button.getAttribute("data-src");

      if (src && type) {
        const event = new CustomEvent(
          `add${type.charAt(0).toUpperCase() + type.slice(1)}`,
          {
            detail: { src, type },
          }
        );
        window.dispatchEvent(event);
      }
    }
  });

  downloadButton?.addEventListener("click", () => {
    const customEvent = new CustomEvent("downloadImage");
    window.dispatchEvent(customEvent);
  });
</script>

<style>
  /* Enfoque mobile-first */
  .content {
    flex: 1 1 auto;
    display: grid;
    grid-template-rows: 1fr auto;
    grid-template-columns: 1fr;
    gap: 1rem;
    max-width: 1024px;
    margin: 0 auto;
    padding: 0 1rem 1rem;
    min-height: 0;
  }

  /* Columna del canvas */
  .guagua {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
    min-height: 0;
  }

  /* Columna del editor - móvil: anclado abajo */
  #editor {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    background-color: rgba(84, 42, 8, 0.3);
    backdrop-filter: blur(10px);
    border-radius: 1rem;
    padding: 0.75rem 1rem;
    max-height: 42vh;
    overflow: hidden;
  }

  .section-tabs {
    display: flex;
    gap: 0.75rem;
  }

  /* Galería - móvil: scroll horizontal */
  .gallery {
    padding: 0.2rem 0;
    display: flex;
    gap: 0.75rem;
    overflow-x: auto;
    overflow-y: hidden;
    min-height: 0;
  }

  .gallery-item {
    padding: 0.2rem;
    background: rgba(254, 205, 110, 0.3);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    cursor: pointer;
    aspect-ratio: 1 / 1;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 0.75rem;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
    flex: 0 0 auto;
    width: 80px;
    height: 80px;
    scroll-snap-align: center;
  }
  .gallery-item:hover {
    background: rgba(254, 205, 110, 0.6);
    border-color: rgba(241, 164, 63, 0.5);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(210, 107, 0, 0.15);
  }

  .gallery-item.selected {
    background: rgba(254, 205, 110, 0.72);
    border-color: rgba(241, 164, 63, 0.9);
    box-shadow:
      0 0 0 2px rgba(241, 164, 63, 0.35) inset,
      0 6px 16px rgba(210, 107, 0, 0.18);
  }
  .gallery-item.selected:hover {
    transform: none;
    box-shadow:
      0 0 0 2px rgba(241, 164, 63, 0.45) inset,
      0 10px 22px rgba(210, 107, 0, 0.25);
  }
  .gallery-item:active {
    transform: translateY(0);
  }
  .gallery-item:focus-visible {
    outline: 2px solid #f1a43f;
    outline-offset: 2px;
  }
  .gallery-item img {
    width: 70%;
    height: 70%;
    object-fit: contain;
    display: block;
    transition: transform 0.2s ease;
  }
  .gallery-item:hover img {
    transform: scale(1.05);
  }
  .gallery-item.selected:hover img {
    transform: none;
  }
  .is-hidden {
    display: none;
  }

  /* Botón de descarga debajo del canvas */
  #download {
    display: flex;
    width: 85%;
    gap: 0.5rem;
    align-items: center;
    justify-content: center;
    background-color: #fecc69;
    color: #663613;
    border: none;
    border-radius: 0.8rem;
    padding: 0.75rem 0.75rem;
    font-size: 1rem;
    font-weight: 700;
    box-shadow: 0 2px 8px rgba(210, 107, 0, 0.15);
    cursor: pointer;
    transition:
      background 0.2s,
      transform 0.2s;
    outline: none;
  }
  #download:hover {
    background-color: #fac04b;
  }

  /* Desktop */
  @media (width >= 48rem) {
    .content {
      width: 100%;
      grid-template-rows: 1fr;
      grid-template-columns: 1fr 1fr; /* canvas | editor */
      align-items: stretch;
      gap: 1.5rem;
      padding: 0 1rem 1.5rem;
    }

    #editor {
      max-height: 65%;
    }

    /* Galería: lista vertical con scroll interno */
    .gallery {
      padding: 0.5rem 0;
      flex-wrap: wrap;
      gap: 1rem;
      overflow-y: auto;
      overflow-x: hidden;
      scroll-snap-type: y mandatory;
      max-height: 100%;
    }
  }

  /* Estilos del scrollbar de la galería */
  .gallery {
    /* Firefox */
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 161, 67, 0.5) rgba(255, 255, 255, 0.2);
  }
  /* WebKit */
  .gallery::-webkit-scrollbar {
    width: 8px; /* scroll vertical (desktop) */
    height: 8px; /* scroll horizontal (móvil) */
  }
  .gallery::-webkit-scrollbar-thumb {
    background: rgba(255, 161, 67, 0.5);
    border-radius: 10px;
  }
  .gallery::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 10px;
  }
</style>
