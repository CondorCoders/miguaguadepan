---
import Image from "astro/components/Image.astro";
import KonvaCanvas from "./KonvaCanvas.astro";
import TabButton, { TargetType } from "./TabButton.astro";
import logo from "../assets/logo.png";
import hats from "../data/hats.json";
import outfits from "../data/outfits.json";
import faces from "../data/faces.json";

const tabData = [
  {
    id: "hats",
    target: TargetType.HATS,
    icon: "/guagua/icons/hats.svg",
    alt: "Sombreros",
  },
  {
    id: "faces",
    target: TargetType.FACES,
    icon: "/guagua/icons/faces.svg",
    alt: "Rostros",
  },
  {
    id: "outfits",
    target: TargetType.OUTFITS,
    icon: "/guagua/icons/outfits.svg",
    alt: "Atuendos",
  },
];
---

<div id="container">
  <main>
    <nav>
      <Image id="logo" src={logo} alt="Astro Logo" decoding={"async"} />
    </nav>
    <div class="content">
      <section id="guagua" class="guagua">
        <div class="canvas-container">
          <KonvaCanvas />
          <button id="download" aria-label="Descargar imagen">
            <img
              src="/guagua/icons/descargar.svg"
              alt="Descargar"
              width="20"
              height="20"
              style="display:block; margin:auto;"
            />
          </button>
        </div>
      </section>
      <section id="editor">
        <div class="titulo-container">
          <Image
            src="/guagua/titulo.png"
            alt="Crea tu guagua"
            width={300}
            height={80}
            class="titulo-image"
          />
        </div>

        <div
          id="tabs"
          class="section-tabs"
          role="tablist"
          aria-label="Editor de secciones"
        >
          {
            tabData.map(({ id, target, icon, alt }, index) => (
              <TabButton
                id={id}
                target={target}
                isActive={index === 0}
                icon={icon}
                alt={alt}
              />
            ))
          }
        </div>

        <div id="hats" class="gallery">
          {
            hats.map((hat) => (
              <button
                type="button"
                class="gallery-item"
                data-type="hat"
                data-src={hat.image}
              >
                <img src={hat.image} alt={hat.id} />
              </button>
            ))
          }
        </div>

        <div id="faces" class="gallery is-hidden">
          {
            faces.map((face) => (
              <button
                type="button"
                class="gallery-item"
                data-type="face"
                data-src={face.image}
              >
                <img src={face.image} alt={face.id} />
              </button>
            ))
          }
        </div>

        <div id="outfits" class="gallery is-hidden">
          {
            outfits.map((outfit) => (
              <button
                type="button"
                class="gallery-item"
                data-type="outfit"
                data-src={outfit.image}
              >
                <img src={outfit.image} alt={outfit.id} />
              </button>
            ))
          }
        </div>
      </section>
    </div>
  </main>
</div>

<script>
  const editor = document.getElementById("editor");
  const tabsContainer = document.getElementById("tabs");
  const tabButtons = tabsContainer?.querySelectorAll("button[role='tab']");
  const tabContainers = editor?.querySelectorAll(".gallery");
  const clearButton = document.getElementById("clear");
  const downloadButton = document.getElementById("download");

  tabsContainer?.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;
    const tab = target?.closest("button[role='tab']") as HTMLButtonElement;

    if (tab) {
      const selectedTab = tab.getAttribute("data-target");
      const tabContainer = editor?.querySelector(`#${selectedTab}`);
      if (tabContainer) {
        tabContainer.classList.remove("is-hidden");

        tabContainers?.forEach((tabContent) => {
          const isActiveTab = tabContent.id === selectedTab;
          tabContent.classList.toggle("is-hidden", !isActiveTab);
        });
      }

      tabButtons?.forEach((tab) => {
        const isActiveTab = tab.getAttribute("data-target") === selectedTab;
        tab.setAttribute("aria-selected", isActiveTab ? "true" : "false");
        tab.classList.toggle("active", isActiveTab);
      });
    }
  });

  editor?.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;
    const closestButton = target?.closest("button.gallery-item");
    const button = closestButton as HTMLButtonElement;

    if (button) {
      const type = button.getAttribute("data-type");
      const src = button.getAttribute("data-src");

      if (src && type) {
        const event = new CustomEvent(
          `add${type.charAt(0).toUpperCase() + type.slice(1)}`,
          {
            detail: { src, type },
          }
        );
        window.dispatchEvent(event);
      }
    }
  });

  clearButton?.addEventListener("click", (event) => {
    const customEvent = new CustomEvent("deleteSelected");
    window.dispatchEvent(customEvent);
  });

  downloadButton?.addEventListener("click", (event) => {
    const customEvent = new CustomEvent("downloadImage");
    window.dispatchEvent(customEvent);
  });

</script>

<style>
  :global(html, body) {
    margin: 0;
    height: 100%;
    overflow-x: hidden;
  }

  #container {
    font-family: "Boogaloo", sans-serif;
    font-weight: 400;
    font-style: normal;
    width: 100%;
    min-height: 100dvh;
    position: relative;
    overflow-x: hidden;
  }

  #container::before {
    content: "";
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url("../assets/background.jpg");
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    z-index: -1;

    @media (width < 48rem) {
      position: absolute;
      background-attachment: scroll;
    }
  }

  main {
    min-height: 100dvh;
    display: flex;
    flex-direction: column;
  }

  .content {
    max-width: 80rem;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    flex: 1 1 auto;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    padding: 0 1rem;
    min-height: 0;
    box-sizing: border-box;
    width: 100%;

    @media (width >= 48rem) {
      flex-direction: row;
      flex-wrap: wrap;
      gap: 5rem;
      padding: 0;
    }
  }

  nav {
    padding: 0 1rem;
  }

  @media (width >= 48rem) {
    nav {
      padding: 0 3rem;
    }
  }

  h1 {
    font-size: 2rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    color: #ebd2a6;
    letter-spacing: -0.02em;
    text-shadow:
      -1px -1px 0 #663613,
      1px -1px 0 #663613,
      -1px 1px 0 #663613,
      1px 1px 0 #663613;
  }

  .titulo-container {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 1rem;
  }

  .titulo-image {
    max-width: 100%;
    height: auto;
  }

  @media (width < 48rem) {
    .titulo-image {
      max-width: 200px;
    }
  }

  @media (width >= 48rem) {
    .titulo-image {
      max-width: 300px;
    }
  }

  #logo {
    width: 150px;
    height: auto;
  }

  @media (width >= 48rem) {
    #logo {
      width: 13rem;
    }
  }

  #editor {
    width: calc(100vw - 2rem);
    max-width: 95%;
    display: flex;
    flex-direction: column;
    background: linear-gradient(
      135deg,
      rgba(254, 205, 110, 0.85) 0%,
      rgba(241, 164, 63, 0.75) 100%
    );
    backdrop-filter: blur(20px);
    border-radius: 1.5rem;
    padding: 2rem 1.5rem;
    min-height: 350px;
    margin-bottom: 2rem;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.671);
    box-sizing: border-box;

    @media (width >= 48rem) {
      width: 40%;
      width: 45%;
      max-width: none;
      min-height: 550px;
      max-height: 550px;
      padding: 3rem 2.5rem;
      margin-bottom: 0;
    }
  }

  .section-tabs {
    display: flex;
    gap: 0.75rem;
    justify-content: space-around;
    margin-bottom: 2rem;
    padding: 0.75rem;
    background: rgba(255, 255, 255, 0.4);
    border-radius: 1rem;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.671);
  }

  .gallery {
    width: 100%;
    display: flex;
    gap: 0.75rem;
    overflow-x: auto;
    overflow-y: hidden;
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .gallery::-webkit-scrollbar {
    display: none;
  }

  @media (width >= 48rem) {
    .gallery {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 1rem;
      overflow-y: auto;
      overflow-x: hidden;
      scroll-snap-type: y mandatory;
      max-height: none;
    }
  }

  .gallery-item {
    padding: 0.5rem;
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.4);
    cursor: pointer;
    aspect-ratio: 1 / 1;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 0.75rem;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
    flex: 0 0 auto;
    width: 100px;
    height: 100px;
    scroll-snap-align: center;
  }

  .gallery-item::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(241, 164, 63, 0.1);
    opacity: 0;
    transition: opacity 0.2s ease;
    border-radius: inherit;
  }

  .gallery-item:hover::before {
    opacity: 1;
  }

  .gallery-item:hover {
    background: rgba(254, 205, 110, 0.8);
    border-color: rgba(241, 164, 63, 0.5);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(210, 107, 0, 0.15);
  }

  .gallery-item:active {
    transform: translateY(0);
  }

  .gallery-item:focus-visible {
    outline: 2px solid #f1a43f;
    outline-offset: 2px;
  }

  .gallery-item img {
    width: 70%;
    height: 70%;
    object-fit: contain;
    display: block;
    position: relative;
    z-index: 1;
    transition: transform 0.2s ease;
  }

  .gallery-item:hover img {
    transform: scale(1.05);
  }

  .is-hidden {
    display: none;
  }

  .guagua {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 0;
    min-width: 0;
    flex: 0 0 auto;
    width: auto;
    height: auto;
    box-sizing: border-box;
    position: relative;
  }

  .canvas-container {
    position: relative;
    display: inline-block;
  }

  #download {
    position: absolute;
    top: 22rem;
    right: 14.5rem;
    z-index: 2;
    background-color: #fecc69;
    color: #663613;
    border: none;
    border-radius: 1rem;
    padding: 0.75rem 0.75rem;
    font-size: 1rem;
    font-weight: 700;
    box-shadow: 0 2px 8px rgba(210, 107, 0, 0.15);
    cursor: pointer;
    transition:
      background 0.2s,
      transform 0.2s;
    outline: none;
  }

  @media (width >= 48rem) {
    #download {
      padding: 0.75rem 0.75rem;
      top: 1rem;
      right: 1rem;
    }
  }

  #download:hover {
    background-color: #fac04b;
    transform: scale(1.03);
  }

  #download:active {
    transform: scale(0.98);
  }
</style>